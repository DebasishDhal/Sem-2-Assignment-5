#include<iostream>
using namespace std;
class node{             //defining and declaring class node.
    public:             
    int data;           
    node *next;
        node()          //constructors for class node.
        {
        data=0;         
        next=NULL;  
        }   
    }*head,*tail;
class linkedlist{       //class linked list.
    public:        
        node *head;     
        node *tail;
        int n;
        int ifsort;     
        //declaring the functions.
        void display();     
        void insert(int data);
        linkedlist()    //constructor for linkedlist class.
        {
            head=NULL ;
            tail=NULL;
            n=0;
        }
};
void linkedlist::insert(int number)         //defining insert function.
    {
        node *temp=new node;
        temp->data=number;
        if(head==NULL)          //if initially no nodes are present.
        {
            head=temp;          //the new node is the head
            tail=temp;          //and the tail.
            n++;                //no.  of node =1
        }   
        else                    //if some at least 1 node is present.
        {
            tail->next=temp;    //tail points to temp.
            tail=temp;          //temp is the new tail.
            n++;                //increment in no. of nodes.
        }
};
void linkedlist::display()
    {
        node *slider=head;      //a slider is pointed to head.
        while(slider!=NULL)     //condition for which the while function ceases to run.
            {
                cout<<slider->data;     
                cout<<"->";
                slider=slider->next;    //slider points to its next node.
            }
        cout<<"NULL"<<endl;             
    }
class quicksort{                        //class quicksort.
public:
    int partitionarray(int arr[],int start,int end);    //partition functions for array.
    void sortarray(int arr[],int start,int end);        //quicksort     ||     ||  ||
    int partitionlist(node *head,int start,int end);    //partition function for linked list.
    void sortlist(node *head,int start,int end);        //sorting function for linked list.
};
node *traversal(node *head,int pos)                     //a funxtion to return a pointer to a required node.
    {
       static node *slider=head;                        
        for(int j=0;j<pos;j++)                          //according to position the loop will continue till the node is pointed.
            {
                slider=slider->next;
            }
        return slider;
    }
int quicksort::partitionlist(node* head,int start,int end)      //partition function for list. 
    {   
      int pivot=tail->data;                                 //setting tail as the pivot.
      int pindex=start;                                     //start will be the intitial index for each pass.
      int temp=0;                                           //a variable to hold value for swapping.
      node *slider1;                                    //two nodes for pointing to two nodes for swapping.
      node *slider2;
      for(int i=start;i<end;i++)                    
        {
            slider1=traversal(head,i);
            if((slider1->data)<=pivot)              
                {                                       //swapping and increment in index if condition is satisfied.
                    slider2=traversal(head,pindex);
                    temp=slider1->data;;
                    slider1->data=slider2->data;
                    slider2->data=temp;
                        pindex++;
                }
        }                                       //final swapping between between end element and index element. 
        slider1=traversal(head,pindex);
        slider2=traversal(head,end);
        temp=slider1->data;
        slider1->data=slider2->data;
        slider2->data=temp;
    return pindex;
    }
void quicksort::sortlist(node *head,int start,int end)
    {   
        if(start<end)
        {    
            int partitionindex=partitionlist(head,start,end);
            sortlist(head,start,partitionindex-1);
            sortlist(head,partitionindex+1,end);
        }
    }
int quicksort::partitionarray(int arr[],int start,int end)
    {
        int pivot=arr[end];
        int pindex=start;
        int temp=0;
        for(int i=start;i<end;i++)
            {
                if(arr[i]<=pivot)
                {
                    temp=arr[i];
                    arr[i]=arr[pindex];
                    arr[pindex]=temp;
                     pindex++;
                }
            }
        temp=arr[pindex];
        arr[pindex]=arr[end];
        arr[end]=temp;
    return pindex;
    }
void quicksort::sortarray(int arr[],int start,int end)
    {
        if(start<end)
            {   
                int partitionindex=partitionarray(arr,start,end);
                sortarray(arr,start,partitionindex-1);
                sortarray(arr,partitionindex+1,end);
            }
    }
int main()
        {  
            linkedlist l;
            l.insert(9);
            l.insert(23);
            l.insert(76);
            l.insert(54);
            l.insert(7);
            l.insert(87878);
            l.insert(65);
            l.insert(7777);
            l.insert(64);
            l.display();
            quicksort q;
            q.sortlist(l.head,0,9);
            l.display();
            int k=5;
            int arr[k]={3,65,4,7,3};
            q.sortarray(arr,0,k-1);
            int count1=0;
            while(count1!=k)
                {
                    cout<<arr[count1]<<endl;
                    count1++;
                }
            return 0;
        }
        //The code was working perfectly till I added the code for linked list.After thet, even sorting for array is not working.
                    
